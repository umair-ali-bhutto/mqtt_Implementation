package com.mportal.ws.classes;

import java.sql.Date;
import java.text.SimpleDateFormat;

import org.apache.commons.codec.binary.Hex;
import org.apache.commons.lang3.StringUtils;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.GenericPackager;
import org.springframework.stereotype.Component;

import com.ag.generic.model.RequestModel;
import com.ag.generic.util.UtilAccess;
import com.ag.mportal.entity.TapNPayRoutingConfig;
import com.ag.mportal.model.ISO8583Model;
import com.ag.mportal.model.TapNPayModel;
import com.ag.mportal.services.WisherTap;
import com.ag.mportal.util.String_to_bcd;
import com.ag.mportal.util.TapNPayUtil;



@Component("com.mportal.ws.classes.WsTapNPayUpiPreAuth")
public class WsTapNPayUpiPreAuth implements WisherTap {
	

	// Field 55 Values
	private final String f82Field = "82";
	private final String f84Field = "84";
	private final String f95Field = "95";
	private final String f9AField = "9A";
	private final String f9CField = "9C";
	private final String f5F2AField = "5F2A";
	private final String f5F34Field = "5F34";
	private final String f9F02Field = "9F02";
	private final String f9F03Field = "9F03";
	private final String f9F06Field = "9F06";
	private final String f9F09Field = "9F09";
	private final String f9F10Field = "9F10";
	private final String f9F1AField = "9F1A";
	private final String f9F1EField = "9F1E";
	private final String f9F26Field = "9F26";
	private final String f9F27Field = "9F27";
	private final String f9F33Field = "9F33";
	private final String f9F35Field = "9F35";
	private final String f9F36Field = "9F36";
	private final String f9F37Field = "9F37";
	private final String f9F41Field = "9F41";

	@Override
	public ISO8583Model doProcess(RequestModel rm, TapNPayModel tap, TapNPayRoutingConfig routing, String stan,
			String invoiceNumber) {
		try {

			Date txnDate = null;

			SimpleDateFormat sdf = new SimpleDateFormat("HHmmss");
			SimpleDateFormat sdfDate = new SimpleDateFormat("MMdd");
			SimpleDateFormat sdfDateForField55 = new SimpleDateFormat("yyMMdd");

			txnDate = new Date(sdfDateForField55.parse(tap.getTransactionDate()).getTime());

			String peckagerPath = routing.getIsoPeckagerPath();
			boolean loggerEnable = Boolean.parseBoolean(routing.getLogger());
			String nacIp = routing.getNacIp();
			int nacPort = Integer.parseInt(routing.getNacPort());
			String isoTpdu = routing.getIsoTpdu();

			String f11 = stan;// STAN
			String f62 = invoiceNumber;// INVOICE

			// Configuration Values
			String f0 = routing.getIsoMessage();
			String f3 = routing.getIsoTxnType(); // To be defined by HOST ITS SALE TXN
			String f4 = tap.getAmountAuthorizedNumeric(); // Amount
			String f12 = sdf.format(new java.util.Date()); // TIME (TO BE GENERATED BY MW)
			String f13 = sdfDate.format(txnDate); // DATE (TO BE GENERATED BY MW)

			String f14 = sdfDate.format(tap.getCardExpiry()); // CARD EXPIRY FROM CARD
			String f22 = routing.getIsoPosEntryMode(); // POS ENTRY MODE
			String f23 = StringUtils.leftPad(tap.getApplicationPanSequenceNumber(), 4, "0"); // PAN SEQUENCE NUMBER
			String f24 = isoTpdu.substring(2, 6); // NII FROM TPDU
			String f25 = routing.getIsoPointServiceCode(); // POINT OF SERVICE CONDITION CODE
			String f35 = tap.getTrack2Data(); // TRACK 2 DATA FROM CARD
			String f41 = tap.getTid(); // TID FROM APP
			String f42 = tap.getMid(); // MID FROM APP
			String f55 = "-----"; // 2D 2D 2D 2D 2D
			String f61 = routing.getIsoPrviateData(); // PRIVATE DATA FROM HOST

			// AgLogger.logInfo(f61+".............");

			ISOMsg mRequest = new ISOMsg();
			GenericPackager packager = new GenericPackager(peckagerPath);
			mRequest.setPackager(packager);
			mRequest.set(0, f0);
			mRequest.set(3, String_to_bcd.convert(f3));
			mRequest.set(4, String_to_bcd.convert(f4));
			mRequest.set(11, String_to_bcd.convert(f11));
			mRequest.set(12, String_to_bcd.convert(f12));
			mRequest.set(13, String_to_bcd.convert(f13));
			mRequest.set(14, String_to_bcd.convert(f14));
			mRequest.set(22, String_to_bcd.convert(f22));
			mRequest.set(23, String_to_bcd.convert(f23));
			mRequest.set(24, String_to_bcd.convert(f24));
			mRequest.set(25, String_to_bcd.convert(f25));
			mRequest.set(35, String_to_bcd.convert(f35.length() + f35));
			mRequest.set(41, f41);
			mRequest.set(42, f42);
			mRequest.set(55, f55);
			mRequest.set(61, String_to_bcd.convert("000" + f61.length() + Hex.encodeHexString(f61.getBytes())));
			mRequest.set(62, String_to_bcd.convert("000" + f62.length() + Hex.encodeHexString(f62.getBytes())));

			/* Field 55 Parsing Started..... */
			String f82 = tap.getApplicationInterchangeProfile(); // Application Interchange Profile
			String f84 = tap.getDedicateFileName(); // Dedicated File Name
			String f95 = tap.getTerminalVerificationResult(); // TVR
			String f9A = sdfDateForField55.format(txnDate); // Transaction Date
			String f9C = tap.getTransactionType(); // Transaction Type
			String f5F2A = tap.getTransactionCurrencyCode(); // Transaction currency code
			String f5F34 = tap.getApplicationPanSequenceNumber(); // Application PAN Sequence Number
			String f9F02 = tap.getAmountAuthorizedNumeric(); // Amount Authorized
			String f9F03 = tap.getAmountOtherNumeric(); // Amount Other
			String f9F06 = tap.getFciModel().getAid(); // Application Identifier
			String f9F09 = tap.getApplicationVersionNumber(); // Application Version Number
			String f9F10 = tap.getIssuedApplicationData(); // Issuer Application Data
			String f9F1A = tap.getTerminalCountryCode(); // Terminal Country Code
			String f9F1E = StringUtils.leftPad(tap.getInterfaceDeviceSerialNumber(), 16, "0"); // Interface Device
																								// Serial Number
			String f9F26 = tap.getApplicationCryptogram(); // Application Cryptogram
			String f9F27 = routing.getIsoCryptoGram(); // Cryptogram Information Data
			String f9F33 = routing.getIsoTerminalCap(); // Terminal Capabilities
			String f9F35 = tap.getTerminalType(); // Terminal Type
			String f9F36 = tap.getApplicationTransactionCounter(); // Application Transaction Counter
			String f9F37 = tap.getUnpredictableNumber(); // Unpredictable Number
			String f9F41 = StringUtils.leftPad(tap.getTransactionSequenceCounter(), 8, "0"); // Transaction Sequence

			StringBuilder sbField55 = new StringBuilder();
			sbField55.append(f82Field);
			sbField55.append(TapNPayUtil.getTagLength(f82));
			sbField55.append(f82);

			sbField55.append(f84Field);
			sbField55.append(TapNPayUtil.getTagLength(f84));
			sbField55.append(f84);

			sbField55.append(f95Field);
			sbField55.append(TapNPayUtil.getTagLength(f95));
			sbField55.append(f95);

			sbField55.append(f9AField);
			sbField55.append(TapNPayUtil.getTagLength(f9A));
			sbField55.append(f9A);

			sbField55.append(f9CField);
			sbField55.append(TapNPayUtil.getTagLength(f9C));
			sbField55.append(f9C);

			sbField55.append(f5F2AField);
			sbField55.append(TapNPayUtil.getTagLength(f5F2A));
			sbField55.append(f5F2A);

			sbField55.append(f5F34Field);
			sbField55.append(TapNPayUtil.getTagLength(f5F34));
			sbField55.append(f5F34);

			sbField55.append(f9F02Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F02));
			sbField55.append(f9F02);

			sbField55.append(f9F03Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F03));
			sbField55.append(f9F03);

			sbField55.append(f9F06Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F06));
			sbField55.append(f9F06);

			sbField55.append(f9F09Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F09));
			sbField55.append(f9F09);

			sbField55.append(f9F10Field);
			sbField55.append("13");
			sbField55.append(f9F10);

			sbField55.append(f9F1AField);
			sbField55.append(TapNPayUtil.getTagLength(f9F1A));
			sbField55.append(f9F1A);

			sbField55.append(f9F1EField);
			sbField55.append(TapNPayUtil.getTagLength(f9F1E));
			sbField55.append(f9F1E);

			sbField55.append(f9F26Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F26));
			sbField55.append(f9F26);

			sbField55.append(f9F27Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F27));
			sbField55.append(f9F27);

			sbField55.append(f9F33Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F33));
			sbField55.append(f9F33);

			sbField55.append(f9F35Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F35));
			sbField55.append(f9F35);

			sbField55.append(f9F36Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F36));
			sbField55.append(f9F36);

			sbField55.append(f9F37Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F37));
			sbField55.append(f9F37);

			sbField55.append(f9F41Field);
			sbField55.append(TapNPayUtil.getTagLength(f9F41));
			sbField55.append(f9F41);

			/* Field 55 Parsing Ended..... */

			byte[] data = mRequest.pack();
			String isoMessageDataWithoutField55 = TapNPayUtil.formatByte(data, false, false);
			String isoMessageDataWithField55 = isoMessageDataWithoutField55.replaceAll("2D2D2D2D2D",
					"0" + sbField55.length() / 2 + "" + sbField55);
			mRequest.setHeader(String_to_bcd.convert(isoTpdu + isoMessageDataWithField55));

			ISO8583Model mdl = new ISO8583Model();
			mdl.setHeader(isoTpdu);
			mdl.setIsoMessageRequest(mRequest);
			mdl.setLoggerEnable(loggerEnable);
			mdl.setNacIp(nacIp);
			mdl.setNacPort(nacPort);
			mdl.setPeckager(peckagerPath);
			mdl.setField55Data(sbField55.toString());
			return mdl;

		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}

	}

}